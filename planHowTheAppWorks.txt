This plaintext document outlines my thought process on a re-write of
this application's Business Logic and User Interface Logic. The UI
Logic may only marginally change. Refer to the Git commit history
prior to Saturday February 5th 2022 for this app's first incarnation.



APPLICATION GOALS


Expected input:

 - A size of pizza

 - A pizza topping (multiple toppings might be offered later as a new
   feature)


Expected output:

 - A pizza with the size and topping chosen by the user, and a price
   to buy it.


To achieve that, do this:



BUSINESS LOGIC


Define an object constructor Pizza with the following properties and
empty values.

 - Size

 - Topping

 - Size price

 - Topping price

 - Total Price


Units for size and price will be added in the UI Logic.


Define a Pizza method 'priceThePizzaSize'.

Input: 	   Output:
sizeChosen sizePrice
12	   6
18	   9
24	   12


Instantiate a new object 'pizza' with the properties from the 'Pizza'
constructor.


Define a method calculateTotalPrice.

Input parameters from the UI Logic: sizeChosen and toppingChosen

 - Find the sizePrice based on the sizeChosen.

 - Find the toppingPrice based on the toppingChosen.

 - Find the totalPrice from the sum of sizePrice and toppingPrice.

 - Return the totalPrice.



HTML and CSS


HTML shows the following to the user:

 - Header of 'Choose your Pizza'.

 - Ask what size is wanted.
 
 - Offer a radio button for each size choice.

 - Ask what topping is wanted.

 - Offer a radio button for each topping choice.

 - Show submit and reset buttons.

 - Show an empty result tag.


In CSS, initially hide the result tag.



USER INTERFACE LOGIC


After the page has loaded, run the UI JavaScript code below:

Run the code below on click of the 'submit' button.

 - Prevent the default of the form result appearing and then quickly
   disappearing. This means keep the result displayed.

 - Empty the tag with id result.

 - Store the value of sizeChosen from the radio button checked.

 - Store the value of toppingChosen from the radio button checked.

 - Call the calculateTotalPrice method, in our Business Logic above,
   and pass it the values of sizeChosen, and toppingChosen.

 - Show the tag with id result.

 - Append to the result tag: sizeChosen, toppingChosen, and
   totalPrice.



STRATEGY TO WRITE THE TESTS AND WRITE THE CODE


Keep in mind this project uses manual tests, since we are not expected
to use automated testing with Jest for this Independent
Project. Therefore I won't include the steps below of running the
tests.

A commit is assumed after each bullet point below.

 - Test for the constructor and its properties.

 - Code the constructor and its properties.

 - Test for the method, its inputs, its actions, and its output.

 - Code the method, its inputs, its actions, and its output.


UI Logic, HTML, and CSS do not need to be tested.

 - Code the UI Logic.

 - Code the HTML and CSS.

 - Manually test the result in the browser.

 - If something doesn't work, repeat prior steps as applicable.

 - Once everything works, submit the project in Epicenter.

